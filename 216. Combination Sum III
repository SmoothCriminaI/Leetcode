class Solution {//0ms,100%
public:
    vector<vector<int>>res;
    vector<int>ans;
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> candidates;
        for(int i=1;i<=9;i++)
            candidates.push_back(i);
        dfs(0,0,candidates,n,k);
        return res;
    }
    void dfs(int start,int sum,vector<int>&candidates,int target,int k)
    {
        if(sum==target&&ans.size()==k)
        {
            res.push_back(ans);
            return;
        }
        else if(ans.size()>k||ans.size()==k&&sum!=target)
        {
            return;
        }
        else
        {
            for(int i=start;i<candidates.size();i++)
            {
                if(candidates[i]>target)return;
                ans.push_back(candidates[i]);
                dfs(i+1,sum+candidates[i],candidates,target,k);
                ans.pop_back();
            }
        }
    }
};
