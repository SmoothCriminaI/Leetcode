/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int mi = INT_MAX;
    int pre = -1;
    int getMinimumDifference(TreeNode* root) {//32ms,18%
        if(root->left)
            getMinimumDifference(root->left);
        
        if(pre >= 0)
        {
            mi = min(mi,root->val-pre);
        }
        
        pre = root->val;
        
        if(root->right)
            getMinimumDifference(root->right);
        
        return mi;
    }
    /*int getMinimumDifference(TreeNode* root) {//28ms,30%
        vector<int>pre;
        inorder(root,pre);
        int mi = INT_MAX;
        for(int i=0;i<pre.size()-1;i++)
        {
            mi = min(pre[i+1]-pre[i],mi);
        }
        return mi;
    }
    void inorder(TreeNode* root,vector<int>& p)
    {
        if(!root)return;
        inorder(root->left,p);
        p.push_back(root->val);
        inorder(root->right,p);
    }*/
    
};
