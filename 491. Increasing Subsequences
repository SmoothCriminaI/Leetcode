class Solution {
public:
    vector<vector<int>> findSubsequences(vector<int>& nums) {//236ms,52%
        vector<vector<int>> ans;
        if(nums.empty())return ans;
        vector<int>res;
        bt(nums,ans,res,0);
        return ans;
    }
    void bt(vector<int>& nums,vector<vector<int>>& ans,vector<int>& res,int start)
    {
        if(res.size()>1)
        {
            ans.push_back(res);
        }
        unordered_set<int>m;
        for(int i=start;i<nums.size();i++)
        {
            if(m.find(nums[i])!=m.end())continue;//!!!reduce duplicated
            if(res.empty()||nums[i]>=res.back())
            {
                res.push_back(nums[i]);
                bt(nums,ans,res,i+1);
                res.pop_back();
                m.insert(nums[i]);
            }
        }
    }
    /*vector<vector<int>> findSubsequences(vector<int>& nums) {//328ms,36%
        set<vector<int>>ans;
        vector<vector<int>> a1;
        if(nums.empty())return a1;
        vector<int>res;
        bt(nums,ans,res,0);
        a1.assign(ans.begin(),ans.end());
        return a1;
    }
    void bt(vector<int>& nums,set<vector<int>>& ans,vector<int>& res,int start)
    {
        if(res.size()>1)
        {
            //ans.push_back(res);
            ans.insert(res);
        }
        for(int i=start;i<nums.size();i++)
        {
            if(i>start&&nums[i]==nums[i-1])continue;//!!!reduce duplicated
            if(res.empty()||nums[i]>=res.back())
            {
                res.push_back(nums[i]);
                bt(nums,ans,res,i+1);
                res.pop_back();
            }
        }
    }*/
};
