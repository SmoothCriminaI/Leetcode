/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {//32ms,23%
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        unordered_map<int,int>c;
        int ma = 0;
        vector<int>ans;
        if(!root)return ans;
        help(root,c,ma);
        for(auto n:c)
        {
            if(n.second==ma)
                ans.push_back(n.first);
        }
        return ans;
        
    }
    int help(TreeNode* root,unordered_map<int,int>&c,int& ma)
    {
        if(!root)
            return 0;
        else
        {
            int tmp = root->val+help(root->left,c,ma)+help(root->right,c,ma);
            c[tmp]++;
            ma = max(ma,c[tmp]);
            return tmp;
        }
    }
};
