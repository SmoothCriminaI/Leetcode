class Solution {//6ms,99%
public:
    string longestPalindrome(string s) {
        if (s.empty()) return "";
        if (s.size() == 1) return s;
        int min_start = 0, max_len = 1;
        for(int i=0;i<s.size();)
        {
            if(s.size()-i<=max_len/2)
                break;
            int j=i,k=i;
            while(k<s.size()-1&&s[k]==s[k+1])
                k++;
            i=k+1;
            while(k<s.size()-1&&j>0&&s[k+1]==s[j-1])
            {
                k++;
                j--;
            }
            if(k-j+1>max_len)
            {
                max_len=k-j+1;
                min_start=j;
            }                
        }
        return s.substr(min_start,max_len);
    }
};
/*
class Solution {//manacher!!!,24ms,78%
public:
    string longestPalindrome(string s) {
        string man = "$#";//防止越界
        for(int i=0;i<s.size();i++)
        {
            man+=s[i];
            man+='#';
        }
        vector<int>len(man.size(),0);
        int pos = 0,mx = 0;
        int mL = 1,mi = 0;
        for(int i=1;i<man.size();i++)
        {
            len[i]= i<mx ? min(len[2*pos-i],mx-i):1;
            while(i+len[i]<man.size()&&i-len[i]>0&&man[i-len[i]]==man[i+len[i]])
                len[i]++;
            if(i+len[i]>mx)
            {
                pos = i;
                mx = i+len[i];
            }
            if(len[i]-1>mL)
            {
               mL = len[i]-1;
               mi = (i-len[i])/2;
            }      
        }
        return s.substr(mi,mL);
    }
};
*/
