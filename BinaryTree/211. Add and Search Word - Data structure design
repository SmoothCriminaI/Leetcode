class WordDictionary {//76ms,99%,without destructor!use recursive
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        isWord = false;
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        WordDictionary* node = this;
        for(char ch:word)
        {
            ch-='a';
            if(!node->next[ch]){node->next[ch]=new WordDictionary();}
            node = node->next[ch];
        }
        node->isWord = true;
    }
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return search(word,0,this);
    }
    
private:
    bool search(string &word,int pos,WordDictionary* node)
    {
        if(pos==word.size())return node->isWord;
        if(word[pos]!='.')
        {
            node = node->next[word[pos]-'a'];
            return node? search(word,pos+1,node):false;
        }
        else
        {
            for(int i=0;i<26;i++)
            {
                if(node->next[i] && search(word,pos+1,node->next[i]))
                    return true;
            }
        }
        return false;
    }
    WordDictionary* next[26]={};
    bool isWord;
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
