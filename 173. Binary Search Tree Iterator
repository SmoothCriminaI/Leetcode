/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {//56ms,70%
public:
    BSTIterator(TreeNode* root):ind(0){
        vector<int> ans;
        stack<TreeNode*> T;
        TreeNode* tmp = root;
        while(!T.empty()||tmp!=NULL)
        {
            while(tmp)
            {
                T.push(tmp);
                tmp = tmp->left;  
            }
            if(!T.empty())
            {
                tmp = T.top(); 
                T.pop();
                bs.push_back(tmp->val);
                tmp = tmp->right;
            }
        }
    }
    
    /** @return the next smallest number */
    int next() {
        return bs[ind++];
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return ind<bs.size();
    }
    int ind;
    vector<int>bs;
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
