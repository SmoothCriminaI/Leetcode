/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {//8ms,85%
public:
    Node* copyRandomList(Node* head) {
        if(!head)return NULL;
        Node* root = new Node(head->val);
        Node* t = head;
        unordered_map<Node*,Node*>copy;
        copy.insert({head,root});
        while(head->next)
        {
            Node* tmp = new Node(head->next->val);
            copy[head]->next = tmp;
            head=head->next;
            copy.insert({head,tmp});
        }
        copy[head]->next=NULL;
        while(t)
        {
            copy[t]->random = copy[t->random];
            t = t->next;
        }
        return root;
    }
};
/*class Solution {//12ms,49%
public:
    Node* copyRandomList(Node* head) {
        if(!head)return NULL;
        Node* root = new Node(head->val);
        root->next = head->next;
        head->next = root;
        while(root->next)
        {
            root = root->next;
            Node* tmp = new Node(root->val);
            tmp -> next = root->next;
            root-> next = tmp;
            root = tmp;
        }
        root = head;
        while(root)
        {
            if(root->random)
                root->next->random = root->random->next;
            else
                root->next->random = NULL;
            root = root->next->next;
        }
        root = head->next;
        Node* tmp = root;
        while(1)
        {
            head->next = tmp->next;
            head = head->next;
            if(!head)
            {
                tmp->next = NULL;
                break;
            }
            tmp->next = head->next;
            tmp = tmp->next;
        }
        return root;
    }
};*/
