class Solution {
public:
    vector<int> hour = {1, 2, 4, 8}, minute = {1, 2, 4, 8, 16, 32};
    vector<string> readBinaryWatch(int num) {//backtracking,0ms,100%
        vector<string>ans;
        bt(ans,make_pair(0,0),num,0);
        return ans;
    }
    void bt(vector<string>& ans,pair<int,int>time,int num,int start)
    {
        if(num==0)
        {
            ans.push_back(to_string(time.first)+(time.second<10?":0":":")+to_string(time.second));
            return;
        }            
        else if(start == hour.size()+minute.size())
            return;
        else
        {
            for(int i=start;i<hour.size()+minute.size();i++)
            {
                if(i<hour.size())
                {
                    time.first+=hour[i];
                    if(time.first<12)
                        bt(ans,time,num-1,i+1);
                    time.first-=hour[i];
                }                
                else
                {
                    time.second+=minute[i-hour.size()];
                    if(time.second<60)
                        bt(ans,time,num-1,i+1);
                    time.second-=minute[i-hour.size()];
                }
            }
        }
    }
    /*vector<string> readBinaryWatch(int num) {//0ms,100%,bit manipulation
        vector<string>rs;
        for(int i=0;i<12;i++)
        {
            for(int j=0;j<60;j++)
            {
                if(bitset<10>(i<<6|j).count()==num)
                    rs.emplace_back(to_string(i) + (j<10?":0":":") + to_string(j));
            }
        }
        return rs;
    }*/
};
