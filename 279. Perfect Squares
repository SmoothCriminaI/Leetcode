class Solution {//can also use Legendre's three-square theorem.answer will be one of 1,2,3,4
public:
    int numSquares(int n) {//4ms,97%!!!!
        //static!!will faster when function is called more than 1 time
        if((int)sqrt(n)*sqrt(n)==n)return 1;
        static vector<int>m({0});
        int ma;
        for(int i=m.size();i<=n;i++)
        {
            ma = INT_MAX;
            for(int j=1;j<=sqrt(i);j++)
            {
                ma=min(ma,m[i-j*j]+1);
            }
            m.push_back(ma);
        }
        return m[n];
    }
    /*int numSquares(int n) {//120ms,45%
        if((int)sqrt(n)*sqrt(n)==n)return 1;
        vector<int>m(n+1,INT_MAX);
        m[0]=0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sqrt(i);j++)
            {
                m[i]=min(m[i],m[i-j*j]+1);
            }
        }
        return m[n];
    }*/
};
