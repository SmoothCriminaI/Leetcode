class Solution {
public:
      vector<int> lexicalOrder(int n) {//68ms,84%
         vector<int>ans(n);//预先分配内存,避免resize！！！！
         int cur = 1; 
         for(int i=0;i<n;i++)
         {
             ans[i]=cur;
             if(cur*10>n)
             {
                 if(cur==n)
                     cur/=10;
                 cur = cur + 1;
                 while(cur%10==0)
                     cur/=10;
             }    
             else
                 cur*= 10;
         }
          return ans;
    }
     /*   vector<int> lexicalOrder(int n) {//1296ms,5%
        vector<int> ans;
        for(int i=1;i<=n;i++)
        {
            ans.push_back(i);
        }
        sort(ans.begin(),ans.end(),[](int a,int b){
            return to_string(a)<to_string(b);//different from heap!!
        });
        return ans;
    }*/
   /* vector<int> lexicalOrder(int n) {//888ms,5%
        vector<int> ans;
        auto cmp = [](int a,int b){
            string a1 = to_string(a),b1 = to_string(b);
            int i=0;
            while(i!=a1.size()&&i!=b1.size())
            {
                if(a1[i]!=b1[i])
                    return a1[i]>b1[i];
                i++;
            }
            return a1.size()>b1.size();
            //return to_string(a)>to_string(b);
        };
        priority_queue<int,vector<int>,decltype(cmp)>q(cmp);
        for(int i=1;i<=n;i++)
            q.push(i);
        for(int i=1;i<=n;i++)
        {
            ans.push_back(q.top());
            q.pop();
        }
        return ans;
    }*/
};
