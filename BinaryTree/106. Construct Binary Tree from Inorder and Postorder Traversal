/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {//12ms,95%
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(postorder.empty()||inorder.empty())return NULL;
        unordered_map<int,int>inmap;
        for(int i=0;i<inorder.size();i++)
            inmap.insert({inorder[i],i});
        return build(postorder,inorder,inmap,0,postorder.size()-1,0,inorder.size()-1);
    }
    TreeNode* build(vector<int>& postorder, vector<int>& inorder,unordered_map<int,int>& inmap,int poststart,int postend,int instart,int inend)
    {
        if(poststart>postend||instart>inend)return NULL;
        TreeNode* root = new TreeNode(postorder[postend]);
        int index = inmap[root->val]-instart;
        root->left = build(postorder,inorder,inmap,poststart,poststart+index-1,instart,index+instart-1);
        root->right = build(postorder,inorder,inmap,poststart+index,postend-1,index+instart+1,inend);
        return root;
    }
};
