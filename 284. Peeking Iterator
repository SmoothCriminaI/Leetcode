// Below is the interface for Iterator, which is already defined for you.
// **DO NOT** modify the interface for Iterator.

class Iterator {
    struct Data;
	Data* data;
public:
	Iterator(const vector<int>& nums);
	Iterator(const Iterator& iter);
	virtual ~Iterator();
	// Returns the next element in the iteration.
	int next();
	// Returns true if the iteration has more elements.
	bool hasNext() const;
};


class PeekingIterator : public Iterator {//0ms,100%
public:
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
        flag=0;
	}

    // Returns the next element in the iteration without advancing the iterator.
	int peek() {//return Iterator(*this).next(); use copy constructor
        if(!flag)
        {
            tmp=next();
            flag=1;
        }
        return tmp;
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() {
        if(!flag)
	        return Iterator::next();
        else
        {
            flag=0;
            return tmp;
        }
	}

	bool hasNext() const {
        if(flag)
            return true;
        else
	        return Iterator::hasNext();
	}
    int flag;
    int tmp;
};
