/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {//8ms,80%,find first use less memory than directly insert
public:
    Node* cloneGraph(Node* node) {
        if(!node)return NULL;
        Node* root = new Node(node->val,node->neighbors);
        unordered_map<int,Node*> visited;
        stack<Node*> N;
        N.push(root);
        visited.insert({root->val,root});
        while(!N.empty())
        {
            Node* tmp = N.top();
            N.pop();
            for(int i=0;i<tmp->neighbors.size();i++)
            {
                auto iter = visited.find(tmp->neighbors[i]->val);
                if(iter!=visited.end())
                {
                    tmp->neighbors[i] = iter->second; 
                }
                else
                {
                    Node* ne = new Node(tmp->neighbors[i]->val,tmp->neighbors[i]->neighbors);
                    tmp->neighbors[i] = ne;
                    visited.insert({ne->val,ne});
                    N.push(ne);
                }
                /*Node* ne = new Node(tmp->neighbors[i]->val,tmp->neighbors[i]->neighbors);
                auto iter = visited.insert({ne->val,ne});
                if(!iter.second)
                {
                    tmp->neighbors[i] = iter.first->second;
                }
                else
                {
                    tmp->neighbors[i] = ne;
                    N.push(ne);
                } */
            }
        }
        return root;
    }
};
