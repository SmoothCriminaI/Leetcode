class Solution {
public:
    int findBoss(int i,vector<int>&boss)
    {
        return boss[i]==i? i : findBoss(boss[i],boss);
    }
    int findCircleNum(vector<vector<int>>& M){//40,99%,unionFind
        if(M.empty())
            return 0;
        int size = M.size();
        vector<int>boss(size);
        for(int i=0;i<size;i++)
            boss[i]=i;
        int res = size;
        for(int i=0;i<size;i++)
        {
            for(int j=i+1;j<size;j++)
            {
                if(M[i][j]==1)
                {
                    int m1 = findBoss(i,boss);
                    int m2 = findBoss(j,boss);
                    if(m1!=m2)
                    {
                        boss[m2] = m1;
                        res--;
                    }
                        
                }
            }
        }
        return res;
    }
    /*int findCircleNum(vector<vector<int>>& M) {//60ms,39%
        if(M.empty())
            return 0;
        int cir = 0;
        vector<int>c(M.size(),-1);
        for(int i=0;i<M.size();i++)
        {
            if(c[i]!=-1)
                continue;
            else
            {
                dfs(M,c,cir,i);
                cir++;
            }
        }
        return cir;
    }
    void dfs(vector<vector<int>>& M,vector<int>&c,int cir,int ind)
    {
        c[ind] = cir;
        for(int i=0;i<M.size();i++)
        {
            if(M[ind][i]==1&&c[i]==-1&&i!=ind)
                dfs(M,c,cir,i);
        }
    }*/
};
