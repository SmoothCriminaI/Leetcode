/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {//52ms,87%,merge sort
public:
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next)return head;
        int block_size = 1, n = 0, iter = 0, i = 0, a = 0, b = 0;
        ListNode *vh = new ListNode(0);
        ListNode *last = NULL, *it = NULL, *A = NULL, *B = NULL, *tmp = NULL;
        vh->next = head;
        while (head != NULL){
            head = head->next;
            ++n;
        }
        head = vh->next;
        while(block_size<n)
        {
            iter = 0;
            last = vh;
            it = vh->next;
            while(iter<n)
            {
                a = min(n - iter, block_size);
                b = min(n - iter - a, block_size);
                
                A = it;
                if(b!=0)
                {
                    for(i=0;i<a-1;i++)it=it->next;
                    B = it->next;
                    it->next=NULL;
                    it = B;
                    
                    for(i=0;i<b-1;i++)it=it->next;
                    tmp= it->next;
                    it->next=NULL;
                    it = tmp;
                }
                
                while(A||B)
                {
                    if(!B||(A&&A->val<B->val))
                    {
                        last->next=A;
                        last=last->next;
                        A = A->next;
                    }
                    else
                    {
                        last->next=B;
                        last=last->next;
                        B = B->next;
                    }
                }
                last->next=NULL;
                iter+=(a+b);
            }
            block_size<<=1;
        }
        return vh->next;
    }
};
